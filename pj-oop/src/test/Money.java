/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import com.sun.java.accessibility.util.SwingEventMonitor;
import java.awt.*;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import org.json.JSONObject;

/**
 *
 * @author Pavaree
 */
public class Money extends javax.swing.JInternalFrame {

    public DocumentListener check1, check2;

    /**
     * Creates new form money
     */
    public Money() {
        initComponents();
        this.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        BasicInternalFrameUI bi = (BasicInternalFrameUI) this.getUI();
        bi.setNorthPane(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        page_money = new javax.swing.JPanel();
        Exchang_txt = new javax.swing.JLabel();
        money_got = new javax.swing.JTextField();
        contry_need = new javax.swing.JComboBox<>();
        money_us = new javax.swing.JTextField();
        contry_us = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        page_money.setBackground(new java.awt.Color(0, 156, 134));
        page_money.setPreferredSize(new java.awt.Dimension(930, 630));

        Exchang_txt.setFont(new java.awt.Font("Consolas", 0, 48)); // NOI18N
        Exchang_txt.setForeground(new java.awt.Color(255, 255, 255));
        Exchang_txt.setText(" Exchange money");

        money_got.setText("Money");
        money_got.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                money_gotFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                money_gotFocusLost(evt);
            }
        });

        contry_need.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Australia", "Canada", "China", "Croatia", "Denmark", "Hungary", "Iceland", "Indonesia", "Japan", "Korea", "Mexico", "Norway", "Singapore", "South Africa", "Sweden", "Switzerland", "Thailand", "Turkey", "United Kingdom", "United States" }));
        contry_need.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contry_needActionPerformed(evt);
            }
        });

        money_us.setText("field your money");
        money_us.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                money_usFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                money_usFocusLost(evt);
            }
        });
        money_us.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                money_usInputMethodTextChanged(evt);
            }
        });

        contry_us.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Australia", "Canada", "China", "Croatia", "Denmark", "Hungary", "Iceland", "Indonesia", "Japan", "Korea", "Mexico", "Norway", "Singapore", "South Africa", "Sweden", "Switzerland", "Thailand", "Turkey", "United Kingdom", "United States" }));
        contry_us.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contry_usActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setText("เงินของคุณที่จะเปลี่ยน");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel2.setText("ค่าสกุลเงินที่เปลี่ยนแล้ว");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel3.setText("jLabel3");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel4.setText("jLabel4");

        javax.swing.GroupLayout page_moneyLayout = new javax.swing.GroupLayout(page_money);
        page_money.setLayout(page_moneyLayout);
        page_moneyLayout.setHorizontalGroup(
            page_moneyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, page_moneyLayout.createSequentialGroup()
                .addContainerGap(301, Short.MAX_VALUE)
                .addComponent(Exchang_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(291, 291, 291))
            .addGroup(page_moneyLayout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(page_moneyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(page_moneyLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(contry_need, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(page_moneyLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(111, 111, 111)
                        .addComponent(contry_us, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(61, 61, 61)
                .addGroup(page_moneyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(money_us)
                    .addComponent(money_got, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(52, 52, 52)
                .addGroup(page_moneyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        page_moneyLayout.setVerticalGroup(
            page_moneyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(page_moneyLayout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addComponent(Exchang_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(88, 88, 88)
                .addGroup(page_moneyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(page_moneyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(money_us, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3))
                    .addGroup(page_moneyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(contry_us, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1)))
                .addGap(83, 83, 83)
                .addGroup(page_moneyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(money_got, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(contry_need, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4))
                .addContainerGap(243, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(page_money, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(page_money, javax.swing.GroupLayout.DEFAULT_SIZE, 666, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void exchange() {
        money_us.getDocument().addDocumentListener(check1 = new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent de) {
                money_got.getDocument().removeDocumentListener(check2);
                changeRealTime();

            }

            @Override
            public void removeUpdate(DocumentEvent de) {
                money_got.getDocument().removeDocumentListener(check2);
                changeRealTime();

            }

            @Override
            public void changedUpdate(DocumentEvent de) {
                money_got.getDocument().removeDocumentListener(check2);
                changeRealTime();

            }

        });

    }

    public void exchangeBack() {
        money_got.getDocument().addDocumentListener(check2 = new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent de) {
                money_us.getDocument().removeDocumentListener(check1);
                changeRealTimeBack();
            }

            @Override
            public void removeUpdate(DocumentEvent de) {
                money_us.getDocument().removeDocumentListener(check1);
                changeRealTimeBack();

            }

            @Override
            public void changedUpdate(DocumentEvent de) {
                money_us.getDocument().removeDocumentListener(check1);
                changeRealTimeBack();

            }

        });

    }
    private void contry_needActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contry_needActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_contry_needActionPerformed

    private void money_usFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_money_usFocusGained
        // TODO add your handling code here:
        if (money_us.getText().trim().equals("field your money")) {
            money_us.setText("");
            money_us.setForeground(Color.BLACK);
        }
        money_us.setText("");
        exchange();

    }//GEN-LAST:event_money_usFocusGained

    private void money_usFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_money_usFocusLost
        // TODO add your handling code here:
        if (money_us.getText().trim().equals("")) {
            money_us.setText("field your money");
            money_us.setForeground(new Color(51, 51, 51));
        }

    }//GEN-LAST:event_money_usFocusLost

    private void money_gotFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_money_gotFocusGained
        // TODO add your handling code here:
        if (money_got.getText().trim().equals("Money")) {
            money_got.setText("");
            money_got.setForeground(Color.BLACK);
        }
        money_got.setText("");
        exchangeBack();
    }//GEN-LAST:event_money_gotFocusGained

    private void money_gotFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_money_gotFocusLost
        // TODO add your handling code here:
        if (money_got.getText().trim().equals("")) {
            money_got.setText("Money");
            money_got.setForeground(new Color(51, 51, 51));
        }
    }//GEN-LAST:event_money_gotFocusLost

    private void contry_usActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contry_usActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_contry_usActionPerformed

    private void money_usInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_money_usInputMethodTextChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_money_usInputMethodTextChanged

    public Money(JLabel Exchang_txt, JButton btn_exc, JComboBox<String> contry_need, JComboBox<String> contry_us, JTextField money_got, JTextField money_us, JPanel page_money) {
        this.Exchang_txt = Exchang_txt;
        this.contry_need = contry_need;
        this.contry_us = contry_us;
        this.money_got = money_got;
        this.money_us = money_us;
        this.page_money = page_money;
    }

    public void changeRealTime() {
        try {
            String first = contry_us.getSelectedItem().toString();
            String second = contry_need.getSelectedItem().toString();
            String url = "";
            if (first.equals("Australia")) {
                url = "https://api.exchangeratesapi.io/latest?base=AUD";
            } else if (first.equals("Canada")) {
                url = "https://api.exchangeratesapi.io/latest?base=CAD";
            } else if (first.equals("China")) {
                url = "https://api.exchangeratesapi.io/latest?base=CNY";
            } else if (first.equals("Croatia")) {
                url = "https://api.exchangeratesapi.io/latest?base=HRK";
            } else if (first.equals("Denmark")) {
                url = "https://api.exchangeratesapi.io/latest?base=DKK";
            } else if (first.equals("Thailand")) {
                url = "https://api.exchangeratesapi.io/latest?base=THB";
            }
            URL obj = new URL(url);
            HttpURLConnection con = (HttpURLConnection) obj.openConnection();
            // optional default is GET
            con.setRequestMethod("GET");
            //add request header
            con.setRequestProperty("User-Agent", "Mozilla/5.0");
            int responseCode = con.getResponseCode();
            //System.out.println("\nSending 'GET' request to URL : " + url);
            //System.out.println("Response Code : " + responseCode);
            BufferedReader in = new BufferedReader(
                    new InputStreamReader(con.getInputStream()));
            String inputLine;
            StringBuffer response = new StringBuffer();
            while ((inputLine = in.readLine()) != null) {
                response.append(inputLine);
            }
            in.close();
            //print in String
            //System.out.println(response);
            //Read JSON response and print
            JSONObject myResponse = new JSONObject(response.toString());
            //System.out.println("result after Reading JSON Response");
            System.out.println(myResponse);
            JSONObject rates = new JSONObject(myResponse.getJSONObject("rates").toString());
            System.out.println(rates);

            if (second.equals("Australia")) {
                money_got.setText(Double.parseDouble(money_us.getText()) * rates.getDouble("AUD") + "");
            } else if (second.equals("Canada")) {
                money_got.setText(Double.parseDouble(money_us.getText()) * rates.getDouble("CAD") + "");
            } else if (second.equals("China")) {
                money_got.setText(Double.parseDouble(money_us.getText()) * rates.getDouble("CNY") + "");
            } else if (second.equals("Croatia")) {
                money_got.setText(Double.parseDouble(money_us.getText()) * rates.getDouble("HRK") + "");
            } else if (second.equals("Denmark")) {
                money_got.setText(Double.parseDouble(money_us.getText()) * rates.getDouble("DKK") + "");
            } else if (second.equals("Thailand")) {
                money_got.setText(Double.parseDouble(money_us.getText()) * rates.getDouble("THB") + "");
            }

        } catch (IOException ex) {
            Logger.getLogger(Money.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void changeRealTimeBack() {
        try {
            String first = contry_us.getSelectedItem().toString();
            String second = contry_need.getSelectedItem().toString();
            String url = "";
            if (second.equals("Australia")) {
                url = "https://api.exchangeratesapi.io/latest?base=AUD";
            } else if (second.equals("Canada")) {
                url = "https://api.exchangeratesapi.io/latest?base=CAD";
            } else if (second.equals("China")) {
                url = "https://api.exchangeratesapi.io/latest?base=CNY";
            } else if (second.equals("Croatia")) {
                url = "https://api.exchangeratesapi.io/latest?base=HRK";
            } else if (second.equals("Denmark")) {
                url = "https://api.exchangeratesapi.io/latest?base=DKK";
            } else if (second.equals("Thailand")) {
                url = "https://api.exchangeratesapi.io/latest?base=THB";
            }
            URL obj = new URL(url);
            HttpURLConnection con = (HttpURLConnection) obj.openConnection();
            // optional default is GET
            con.setRequestMethod("GET");
            //add request header
            con.setRequestProperty("User-Agent", "Mozilla/5.0");
            //System.out.println("\nSending 'GET' request to URL : " + url);
            //System.out.println("Response Code : " + responseCode);
            BufferedReader in = new BufferedReader(
                    new InputStreamReader(con.getInputStream()));
            String inputLine;
            StringBuffer response = new StringBuffer();
            while ((inputLine = in.readLine()) != null) {
                response.append(inputLine);
            }
            in.close();
            //print in String
            //System.out.println(response);
            //Read JSON response and print
            JSONObject myResponse = new JSONObject(response.toString());
            //System.out.println("result after Reading JSON Response");
            System.out.println(myResponse);
            JSONObject rates = new JSONObject(myResponse.getJSONObject("rates").toString());
            System.out.println(rates);

            if (first.equals("Australia")) {
                money_us.setText(Double.parseDouble(money_got.getText()) * rates.getDouble("AUD") + "");
            } else if (first.equals("Canada")) {
                money_us.setText(Double.parseDouble(money_got.getText()) * rates.getDouble("CAD") + "");
            } else if (first.equals("China")) {
                money_us.setText(Double.parseDouble(money_got.getText()) * rates.getDouble("CNY") + "");
            } else if (first.equals("Croatia")) {
                money_us.setText(Double.parseDouble(money_got.getText()) * rates.getDouble("HRK") + "");
            } else if (first.equals("Denmark")) {
                money_us.setText(Double.parseDouble(money_got.getText()) * rates.getDouble("DKK") + "");
            }

        } catch (IOException ex) {
            Logger.getLogger(Money.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Exchang_txt;
    private javax.swing.JComboBox<String> contry_need;
    private javax.swing.JComboBox<String> contry_us;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JTextField money_got;
    private javax.swing.JTextField money_us;
    private javax.swing.JPanel page_money;
    // End of variables declaration//GEN-END:variables
}
